{"version":3,"sources":["start.js","Cell.js","Snake.js","App.js","serviceWorker.js","index.js"],"names":["startingPositions","gridSize","startingPoint","Math","round","createMatrix","matrix","i","push","Array","fill","console","log","forEach","position","start","Cell","type","this","props","value","react_default","a","createElement","className","Component","Snake","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","e","direction","state","keyCode","go","timer","setState","ate","headY","headX","positions","bind","assertThisInitialized","move","placeApple","window","addEventListener","length","drawGrid","_this2","setInterval","speed","clearInterval","alert","concat","score","randX","random","randY","wrap","gameOver","addPoints","parseInt","tailY","tailX","pop","unshift","map","row","cell","src_Cell","App","points","toggleWalls","toggleParty","party","highscore","id","min","max","step","onChange","target","class","src_Snake","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAAaA,EAAoB,SAACC,GAC9B,IAAMC,EAAgBC,KAAKC,MAAMH,EAAS,GAC1C,MAAO,CAAC,CAAC,EAAEC,GAAgB,CAAC,EAAEA,KAGrBG,EAAe,SAACJ,GAGzB,IADA,IAAMK,EAAS,GACNC,EAAI,EAAGA,EAAEN,EAAUM,IACxBD,EAAOE,KAAKC,MAAMR,GAAUS,KAAK,IAQrC,OANAC,QAAQC,IAAI,0BAA2BN,GAErBN,EAAkBC,GAC1BY,QAAQ,SAAAC,GACdR,EAAOQ,EAAS,IAAIA,EAAS,IAAM,IAEhCR,GAGES,EAAQ,CACjB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EA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","file":"static/js/main.c47c9c2f.chunk.js","sourcesContent":["export const startingPositions = (gridSize) => {\n    const startingPoint = Math.round(gridSize/2);\n    return [[1,startingPoint], [0,startingPoint]];\n}\n\nexport const createMatrix = (gridSize) => {\n    // const matrix = Array(gridSize).fill(Array(gridSize).fill(0));\n    const matrix = [];\n    for (let i = 0; i<gridSize; i++) {\n        matrix.push(Array(gridSize).fill(0));\n    }\n    console.log(\"welcome to the matrix: \", matrix)\n    // return matrix;\n    const positions = startingPositions(gridSize);\n    positions.forEach(position => {\n        matrix[position[0]][position[1]] = 1\n    })\n    return matrix;\n}\n\nexport const start = [\n    [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n];","import React, { Component } from 'react';\nimport './App.css';\n\nclass Cell extends Component {\n    render() {\n        let type;\n        if (this.props.value == 0) type=\"EmptyCell\";\n        if (this.props.value == 1) type=\"SnakeCell\";\n        if (this.props.value == 2) type=\"AppleCell\";\n        return (\n            <div className={type}>\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport {createMatrix, startingPositions, start} from './start.js';\nimport Cell from './Cell.js';\nimport './App.css';\n\nclass Snake extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            go: false,\n            ate: false,\n            matrix: start,\n            direction: \"down\",\n            headY: 1,\n            headX: 9,\n            positions: [[1,9], [0,9]],\n            timer: null,\n        }\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.move = this.move.bind(this);\n        this.placeApple = this.placeApple.bind(this);\n    }\n\n    componentDidMount() {\n        // this.drawGrid();\n        // this.setState({matrix: start})\n        this.placeApple();\n        window.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    componentDidUpdate() {\n        if (this.state.matrix.length !== this.props.gridSize) { this.drawGrid() }\n    }\n\n    drawGrid() {\n        this.setState({matrix: createMatrix(this.props.gridSize || 20)});\n        this.setState({positions: startingPositions(this.props.gridSize || 20)});\n    }\n\n    go(){\n        this.setState({go: true});\n        this.setState({timer: setInterval(() => this.move(), this.props.speed)});\n    }\n\n    gameOver(){\n        clearInterval(this.state.timer);\n        window.alert(`Game Over! \\n SCORE: ${this.props.score}`);\n    }\n\n    placeApple() {\n        let matrix = this.state.matrix;\n        if (matrix == [] || !matrix) return;\n        console.log(\"matrix: \", matrix)\n        const randX = Math.round(Math.random()*this.props.gridSize);\n        const randY = Math.round(Math.random()*this.props.gridSize);\n        console.log(\"randX: \", randX)\n        console.log(\"randY: \", randY)\n        if (!matrix[randY]) return;\n        if (matrix[randY][randX] == 0) {\n            matrix[randY][randX] = 2;\n            this.setState({matrix});\n        } else this.placeApple();\n    }\n\n    move(){\n        let headX = this.state.headX;\n        let headY = this.state.headY;\n        let positions = this.state.positions;\n        let matrix = this.state.matrix;\n        let ate = false;\n\n        //change values for head\n        switch(this.state.direction){\n            case 'down':\n                headY++;\n                if (headY > this.props.gridSize){\n                    if (this.props.wrap) {headY = 0} else {this.gameOver()}\n                }\n                if (matrix[headY][headX] == 1) this.gameOver();\n                break;\n            case 'up':\n                headY--;\n                if (headY < 0){\n                    if (this.props.wrap) {headY = this.props.gridSize} else {this.gameOver()}\n                }\n                if (matrix[headY][headX] == 1) this.gameOver();\n                break;\n            case 'right':\n                headX++;\n                if (headX > this.props.gridSize){\n                    if (this.props.wrap) {headX = 0} else {this.gameOver()}\n                }\n                if (matrix[headY][headX] == 1) this.gameOver();\n                break;\n            case 'left':\n                headX--;\n                if (headX < 0){\n                    if (this.props.wrap) {headX = this.props.gridSize} else {this.gameOver()}\n                }\n                if (matrix[headY][headX] == 1) this.gameOver();\n                break;\n        }\n\n        //check if snake has eaten\n        if (matrix[headY][headX] == 2) {\n            ate = true;\n            this.props.addPoints(5+parseInt(this.state.positions.length/5));\n            this.placeApple();\n        }\n        //remove previous tail\n        let tailY = positions[positions.length-1][0];\n        let tailX = positions[positions.length-1][1];\n        if (!ate){\n            matrix[tailY][tailX] = 0;\n            positions.pop();\n        }\n                \n        //add new head\n        matrix[headY][headX] = 1;\n        positions.unshift([headY, headX]);\n        this.setState({headX, headY, tailX, tailY, matrix, positions});\n    }\n\n    handleKeyPress = (e) => {\n        let direction = this.state.direction;\n        switch(e.keyCode){\n            case 32:\n                if (!this.state.go) this.go(this.state.timer);\n                break;\n            case 40:\n                if (direction != 'up') direction = 'down';\n                break;\n            case 83:\n                if (direction != 'up') direction = 'down';\n                break;\n            case 38:\n                if (direction != 'down') direction = 'up';\n                break;\n            case 87:\n                if (direction != 'down') direction = 'up';\n                break;\n            case 39:\n                if (direction != 'left') direction = 'right';\n                break;\n            case 68:\n                if (direction != 'left') direction = 'right';\n                break;\n            case 37:\n                if (direction != 'right') direction = 'left';\n                break;\n            case 65:\n                if (direction != 'right') direction = 'left';\n                break;\n        }\n        this.setState({direction});\n    }\n\n    render() {\n        return (\n            <div className=\"Snake\">\n            {this.state.matrix.map((row) => (\n                row.map((cell) => (\n                    <Cell value={cell}/>\n                ))\n            ))}\n        </div>\n        );\n    }\n}\n\nexport default Snake;\n","import React, { Component } from 'react';\nimport Snake from './Snake.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      score: 0,\n      highscore: 0,\n      gridSize: 20,\n      wrap: true,\n      speed: 5, // lower number = faster\n      party: false\n    }\n  }\n\n  addPoints = (points) => {\n    let score = this.state.score;\n    score += points;\n    this.setState({score})\n  }\n  \n  toggleWalls = () => {\n    this.setState({wrap: !this.state.wrap})\n  }\n\n  toggleParty = () => {\n    this.setState({party: !this.state.party})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Header\">\n          <div className=\"Header--Section\">\n            <div className=\"App--Title\">SNAKE</div>\n            <div>press</div>\n            <b>SPACE</b>\n            <div>to start</div>\n          </div>\n          <div className=\"Header--Section\">\n            <div className=\"Header--Label\">SCORE:</div>\n            <div className=\"App-Score\">{this.state.score}</div>\n          </div>\n          <div className=\"Header--Section\">\n            <div className=\"Header--Label\">GRID:</div>\n            <input id=\"speed\" type=\"number\" value={this.state.gridSize} min=\"10\" max=\"100\" step=\"5\" onChange={e => this.setState({gridSize: e.target.value})}/>\n          </div>\n          <div className=\"Header--Section\">\n            <div className=\"Header--Label\">SPEED:</div>\n            <input id=\"speed\" type=\"number\" value={this.state.speed} min=\"1\" max=\"10\" onChange={e => this.setState({speed: e.target.value})}/>\n          </div>\n          <div className=\"Header--Section\">\n            <div className=\"Header--Label\">WALLS:</div>\n            <label class=\"switch\">\n            <input type=\"checkbox\" onChange={this.toggleWalls}/>\n            <span class=\"slider round\">\n            </span>\n            </label>\n          </div>\n          {/* <div className=\"Header--Section\">\n            <div className=\"Header--Label\">PARTY?</div>\n            <label class=\"switch\">\n            <input type=\"checkbox\" onChange={this.toggleParty}/>\n            <span class=\"slider round\">\n            </span>\n            </label>\n          </div> */}\n        </div>\n        \n        <br/>\n\n        <Snake wrap={this.state.wrap} score={this.state.score} addPoints={this.addPoints} speed={(11-this.state.speed) * 50} gridSize={this.state.gridSize}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}